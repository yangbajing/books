// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.1
// source: getting/v1/auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "getting.v1";

export enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0,
  TOKEN_TYPE_BEARER = 1,
  UNRECOGNIZED = -1,
}

export function tokenTypeFromJSON(object: any): TokenType {
  switch (object) {
    case 0:
    case "TOKEN_TYPE_UNSPECIFIED":
      return TokenType.TOKEN_TYPE_UNSPECIFIED;
    case 1:
    case "TOKEN_TYPE_BEARER":
      return TokenType.TOKEN_TYPE_BEARER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TokenType.UNRECOGNIZED;
  }
}

export function tokenTypeToJSON(object: TokenType): string {
  switch (object) {
    case TokenType.TOKEN_TYPE_UNSPECIFIED:
      return "TOKEN_TYPE_UNSPECIFIED";
    case TokenType.TOKEN_TYPE_BEARER:
      return "TOKEN_TYPE_BEARER";
    case TokenType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SigninRequest {
  email: string;
  password: string;
}

export interface SigninResponse {
  accessToken: string;
  tokenType: TokenType;
}

export interface SignupRequest {
  email: string;
  password: string;
}

export interface SignupResponse {
  code: number;
  message?: string | undefined;
}

function createBaseSigninRequest(): SigninRequest {
  return { email: "", password: "" };
}

export const SigninRequest: MessageFns<SigninRequest> = {
  encode(message: SigninRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SigninRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigninRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigninRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SigninRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<SigninRequest>): SigninRequest {
    return SigninRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SigninRequest>): SigninRequest {
    const message = createBaseSigninRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSigninResponse(): SigninResponse {
  return { accessToken: "", tokenType: 0 };
}

export const SigninResponse: MessageFns<SigninResponse> = {
  encode(message: SigninResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.tokenType !== 0) {
      writer.uint32(16).int32(message.tokenType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SigninResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSigninResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tokenType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SigninResponse {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      tokenType: isSet(object.tokenType) ? tokenTypeFromJSON(object.tokenType) : 0,
    };
  },

  toJSON(message: SigninResponse): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.tokenType !== 0) {
      obj.tokenType = tokenTypeToJSON(message.tokenType);
    }
    return obj;
  },

  create(base?: DeepPartial<SigninResponse>): SigninResponse {
    return SigninResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SigninResponse>): SigninResponse {
    const message = createBaseSigninResponse();
    message.accessToken = object.accessToken ?? "";
    message.tokenType = object.tokenType ?? 0;
    return message;
  },
};

function createBaseSignupRequest(): SignupRequest {
  return { email: "", password: "" };
}

export const SignupRequest: MessageFns<SignupRequest> = {
  encode(message: SignupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignupRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SignupRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<SignupRequest>): SignupRequest {
    return SignupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignupRequest>): SignupRequest {
    const message = createBaseSignupRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSignupResponse(): SignupResponse {
  return { code: 0, message: undefined };
}

export const SignupResponse: MessageFns<SignupResponse> = {
  encode(message: SignupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== undefined) {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignupResponse {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
    };
  },

  toJSON(message: SignupResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<SignupResponse>): SignupResponse {
    return SignupResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignupResponse>): SignupResponse {
    const message = createBaseSignupResponse();
    message.code = object.code ?? 0;
    message.message = object.message ?? undefined;
    return message;
  },
};

export type AuthDefinition = typeof AuthDefinition;
export const AuthDefinition = {
  name: "Auth",
  fullName: "getting.v1.Auth",
  methods: {
    signin: {
      name: "Signin",
      requestType: SigninRequest,
      requestStream: false,
      responseType: SigninResponse,
      responseStream: false,
      options: {},
    },
    signup: {
      name: "Signup",
      requestType: SignupRequest,
      requestStream: false,
      responseType: SignupResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AuthServiceImplementation<CallContextExt = {}> {
  signin(request: SigninRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SigninResponse>>;
  signup(request: SignupRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SignupResponse>>;
}

export interface AuthClient<CallOptionsExt = {}> {
  signin(request: DeepPartial<SigninRequest>, options?: CallOptions & CallOptionsExt): Promise<SigninResponse>;
  signup(request: DeepPartial<SignupRequest>, options?: CallOptions & CallOptionsExt): Promise<SignupResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
